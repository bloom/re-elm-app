// Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");

var ErrorDecodingPortMsg = Caml_exceptions.create("ElmApp.ErrorDecodingPortMsg");

var MountPointNotFound = Caml_exceptions.create("ElmApp.MountPointNotFound");

function mount(selector, flags, unmountedApp) {
  var match = document.querySelector(selector);
  if (match == null) {
    throw [
          MountPointNotFound,
          selector
        ];
  } else {
    return unmountedApp.embed(match, flags);
  }
}

function decodePortMsg(json) {
  try {
    return /* Ok */Block.__(0, [{
                tag: Json_decode.field("tag", Json_decode.string, json),
                payload: Json_decode.field("payload", (function (a) {
                        return a;
                      }), json)
              }]);
  }
  catch (raw_exn){
    var exn = Js_exn.internalToOCamlException(raw_exn);
    if (exn[0] === Json_decode.DecodeError) {
      return /* Error */Block.__(1, [exn[1]]);
    } else {
      throw exn;
    }
  }
}

var subscribeToPort = (function(portName, cb, app) {
      app.ports[portName].subscribe(cb);
      return app;
    }
    );

exports.ErrorDecodingPortMsg = ErrorDecodingPortMsg;
exports.MountPointNotFound = MountPointNotFound;
exports.mount = mount;
exports.decodePortMsg = decodePortMsg;
exports.subscribeToPort = subscribeToPort;
/* subscribeToPort Not a pure module */
